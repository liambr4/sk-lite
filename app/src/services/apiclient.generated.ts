import ApiClient from "./apibase.tsx";

//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client extends ApiClient {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor() {
    super();
    this.http = window as any;
  }

  /**
   * @return Success
   */
  users(): Promise<void> {
    let url_ = this.baseUrl + "/Users";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {},
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processUsers(_response);
    });
  }

  protected processUsers(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * @return Success
   */
  weatherForecast(): Promise<WeatherForecast[]> {
    let url_ = this.baseUrl + "/WeatherForecast";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        Accept: "text/plain",
        Authoriation: this.header,
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processWeatherForecast(_response);
    });
  }

  protected processWeatherForecast(
    response: Response,
  ): Promise<WeatherForecast[]> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
          result200 = [] as any;
          for (let item of resultData200)
            result200!.push(WeatherForecast.fromJS(item));
        } else {
          result200 = <any>null;
        }
        return result200;
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers,
        );
      });
    }
    return Promise.resolve<WeatherForecast[]>(null as any);
  }
}

export class DateOnly implements IDateOnly {
  year?: number;
  month?: number;
  day?: number;
  dayOfWeek?: DayOfWeek;
  readonly dayOfYear?: number;
  readonly dayNumber?: number;

  constructor(data?: IDateOnly) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.year = _data["year"];
      this.month = _data["month"];
      this.day = _data["day"];
      this.dayOfWeek = _data["dayOfWeek"];
      (<any>this).dayOfYear = _data["dayOfYear"];
      (<any>this).dayNumber = _data["dayNumber"];
    }
  }

  static fromJS(data: any): DateOnly {
    data = typeof data === "object" ? data : {};
    let result = new DateOnly();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["year"] = this.year;
    data["month"] = this.month;
    data["day"] = this.day;
    data["dayOfWeek"] = this.dayOfWeek;
    data["dayOfYear"] = this.dayOfYear;
    data["dayNumber"] = this.dayNumber;
    return data;
  }
}

export interface IDateOnly {
  year?: number;
  month?: number;
  day?: number;
  dayOfWeek?: DayOfWeek;
  dayOfYear?: number;
  dayNumber?: number;
}

export type DayOfWeek = 0 | 1 | 2 | 3 | 4 | 5 | 6;

export class WeatherForecast implements IWeatherForecast {
  date?: DateOnly;
  temperatureC?: number;
  readonly temperatureF?: number;
  summary?: string | undefined;

  constructor(data?: IWeatherForecast) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.date = _data["date"]
        ? DateOnly.fromJS(_data["date"])
        : <any>undefined;
      this.temperatureC = _data["temperatureC"];
      (<any>this).temperatureF = _data["temperatureF"];
      this.summary = _data["summary"];
    }
  }

  static fromJS(data: any): WeatherForecast {
    data = typeof data === "object" ? data : {};
    let result = new WeatherForecast();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["date"] = this.date ? this.date.toJSON() : <any>undefined;
    data["temperatureC"] = this.temperatureC;
    data["temperatureF"] = this.temperatureF;
    data["summary"] = this.summary;
    return data;
  }
}

export interface IWeatherForecast {
  date?: DateOnly;
  temperatureC?: number;
  temperatureF?: number;
  summary?: string | undefined;
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any,
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any,
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
